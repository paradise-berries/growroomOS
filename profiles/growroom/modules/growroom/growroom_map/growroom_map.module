<?php
/**
 * @file
 * Code for the Growroom Maps feature.
 */

include_once 'growroom_map.features.inc';

/**
 * Implements hook_permission().
 */
function growroom_map_permission() {
  $perms = array(
    'administer growroom_map module' => array(
      'title' => t('Administer growroom map module'),
    ),
  );
  return $perms;
}

/**
 * Implements hook_growroom_access_perms().
 */
function growroom_map_growroom_access_perms($role) {

  // If the role is "Growroom Manager", grant access to map configuration.
  $perms = array();
  if ($role == 'Growroom Manager') {
    $perms[] = 'administer growroom_map module';
  }

  return $perms;
}

/**
 * Implements hook_menu().
 */
function growroom_map_menu() {

  // Map configuration form.
  $items['admin/config/growroom/map'] = array(
    'title' => 'Map',
    'description' => 'Map configuration settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growroom_map_settings_form'),
    'access arguments' => array('administer growroom_map module'),
  );

  return $items;
}

/**
 * Build a map render array.
 *
 * @param string $map_name
 *   The machine name of the map.
 * @param bool $fieldset
 *   Whether or not to wrap the map in a fieldset.
 * @param string $title
 *   Whether or not to wrap the map in a fieldset.
 * @param bool $collapsed
 *   Whether or not to collapse the fieldset by default.
 *
 * @return array
 *   Returns a Drupal render array.
 */
function growroom_map_build($map_name, $fieldset = FALSE, $title = '', $collapsed = FALSE) {

  // Start with an empty build.
  $build = array();

  // If maps are disabled, bail.
  if (!variable_get('growroom_map_show', TRUE)) {
    return $build;
  }

  // Load the map.
  $map = \Drupal\openlayers\Openlayers::load('Map', $map_name);

  // If the map didn't load, bail.
  if (empty($map)) {
    return $build;
  }

  // Build the map.
  $build = $map->build();

  // Wrap the map in a fieldset, if desired.
  if (!empty($fieldset)) {

    // Create the fieldset.
    $build = array(
      '#type' => 'fieldset',
      '#title' => $title,
      '#collapsible' => TRUE,
      '#collapsed' => $collapsed,
      'growroom_map' => $build,
    );

    // Add 'collapsible' and 'collapsed' classes. This is necessary when
    // rendering the fieldset outside of a form.
    // See: https://www.drupal.org/node/1099132
    drupal_add_library('system', 'drupal.collapse');
    $build['#attributes']['class'][] = 'collapsible';
    $build['#attributes']['class'][] = 'collapsed';
  }

  // Return the build.
  return $build;
}

/**
 * Map settings form.
 */
function growroom_map_settings_form($form, &$form_state) {

  // Show/hide the dashboard maps.
  // This provides a central variable that other modules can use to determine
  // whether or not to display a dashboard map.
  $form['growroom_map_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show dashboard maps'),
    '#description' => t('If unchecked, this setting will disable the display of dashboard maps in growroomOS. This may be helpful for growrooms that do not want to use the mapping features (for instance, if they are in a part of the world that has limited map imagery coverage).'),
    '#default_value' => variable_get('growroom_map_show', TRUE),
  );

  // Specify the default base layer.
  $form['growroom_map_default_base_layer'] = array(
    '#type' => 'radios',
    '#title' => t('Default base layer'),
    '#description' => t('Select the default base layer for maps.'),
    '#options' => array(
      'growroom_map_layer_google_hybrid' => t('Google Hybrid'),
      'growroom_map_layer_openstreetmap' => t('OpenStreetMap'),
    ),
    '#default_value' => variable_get('growroom_map_default_base_layer', 'growroom_map_layer_google_hybrid'),
  );

  // Google Maps API key.
  $form['growroom_map_google_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google Maps API Key'),
    '#description' => t('Google Maps layers require that you obtain an API key. Refer to the <a href="@doc">Google Maps API Key</a> documentation on growroomOS.org for instructions.', array('@doc' => 'https://growroomos.org/hosting/googlemaps')),
    '#default_value' => variable_get('growroom_map_google_api_key', ''),
  );

  // Add a custom submit function to clear the Drupal cache on submission.
  $form['#submit'][] = 'growroom_map_settings_form_submit';

  // Return it as a system settings form.
  return system_settings_form($form);
}

/**
 * Submit function for the growroom map settings form.
 */
function growroom_map_settings_form_submit($form, $form_state) {

  // Clear the Drupal cache so that changes to the default map base layer
  // are picked up by Openlayers in growroom_map_default_openlayers_layers_alter().
  drupal_flush_all_caches();
}

/**
 * Implements hook_openlayers_object_preprocess_alter().
 */
function growroom_map_openlayers_object_preprocess_alter(&$build, $context) {

  // If the object is a Map...
  if ($context instanceof Drupal\openlayers\Types\MapInterface) {

    // If the map machine name starts with "growroom_", add growroom map CSS.
    if (substr($context->getMachineName(), 0, 5) == 'growroom_') {
      drupal_add_css(drupal_get_path('module', 'growroom_map') . '/css/growroom_map.css');
    }
  }
}

/**
 * Extract geometries from an entity.
 *
 * @param $entity_type
 *   The entity type machine name.
 * @param $entity
 *   The entity object.
 *
 * @return array
 *   Return an array of geometry strings in WKT format. An associative array
 *   is allowed, and the keys can be used to differentiate multiple geometries
 *   from the same entity.
 */
function growroom_map_entity_geometries($entity_type, $entity) {

  // Ask modules to extract geometries.
  return module_invoke_all('growroom_map_entity_geometries', $entity_type, $entity);
}

/**
 * Implements hook_growroom_map_geometries().
 */
function growroom_map_growroom_map_entity_geometries($entity_type, $entity) {
  $geometries = array();

  // Find geometry in the standard geofield.
  if (!empty($entity->field_growroom_geofield[LANGUAGE_NONE][0]['geom'])) {
    $geometries[] = $entity->field_growroom_geofield[LANGUAGE_NONE][0]['geom'];
  }

  return $geometries;
}

/**
 * Implements hook_module_implements_alter().
 */
function growroom_map_module_implements_alter(&$implementations, $hook) {

  // Ensure that this module's implementation of
  // hook_default_openlayers_maps_alter() always runs last, so that it can add
  // the "base layers" group to the bottom of the layers list on all growroom maps.
  // @see growroom_map_default_openlayers_maps_alter()
  if ($hook == 'default_openlayers_maps_alter' && array_key_exists('growroom_map', $implementations)) {
    $group = $implementations['growroom_map'];
    unset($implementations['growroom_map']);
    $implementations['growroom_map'] = $group;
  }
}

/**
 * Helper function for populating the geometry field of an entity.
 *
 * @param Entity $entity
 *   The entity object.
 * @param array $geoms
 *   An array of geometry strings in WKT format.
 */
function growroom_map_geofield_populate(&$entity, $geoms = array()) {

  // If no geometries were found, bail.
  if (empty($geoms)) {
    return;
  }

  // Combine the WKT geometries into a single GeoPHP geometry.
  $geometry = growroom_map_geofield_geometry_combine($geoms);

  // If that didn't work, bail.
  if (empty($geometry)) {
    return;
  }

  // Save the combined geometry to the movement log.
  if (!empty($geometry)) {
    $entity->field_growroom_geofield[LANGUAGE_NONE][0] = geofield_get_values_from_geometry($geometry);
  }
}

/**
 * Combine multiple WKT geometries into a single GeoPHP geometry object.
 *
 * @param array $geoms
 *   An array of geometry strings in WKT format.
 *
 * @return object|bool
 *   Returns a GeoPHP object, or FALSE on failure.
 */
function growroom_map_geofield_geometry_combine($geoms = array()) {

  // If no geometries were found, return an empty geometry.
  if (empty($geoms)) {
    return FALSE;
  }

  // Load the GeoPHP library.
  geophp_load();

  // If there is more than one geometry, we will wrap it all in a
  // GEOMETRYCOLLECTION() at the end.
  $geometrycollection = FALSE;
  if (count($geoms) > 1) {
    $geometrycollection = TRUE;
  }

  // Build an array of WKT strings.
  $wkt_strings = array();
  foreach ($geoms as &$geom) {

    // Convert to a GeoPHP geometry object.
    $geometry = geoPHP::load($geom, 'wkt');

    // If this is a geometry collection, multi-point, multi-linestring, or
    // multi-polygon, then extract its components and add them individually to
    // the array.
    $multigeometries = array(
      'GeometryCollection',
      'MultiPoint',
      'MultiLineSting',
      'MultiPolygon',
    );
    if (in_array($geometry->geometryType(), $multigeometries)) {

      // Iterate through the geometry components and add each to the array.
      $components = $geometry->getComponents();
      foreach ($components as $component) {
        $wkt_strings[] = $component->asText();
      }

      // Set $geometrycollection to TRUE in case there was only one geometry in
      // the $geoms parameter of this function, so that we know to wrap the WKT
      // in a GEOMETRYCOLLECTION() at the end.
      $geometrycollection = TRUE;
    }

    // Otherwise, add it to the array.
    else {
      $wkt_strings[] = $geometry->asText();
    }
  }

  // Combine all the WKT strings together into one.
  $wkt = implode(',', $wkt_strings);

  // If there is more than one geometry, wrap them all in a geometry collection.
  if ($geometrycollection) {
    $wkt = 'GEOMETRYCOLLECTION (' . $wkt . ')';
  }

  // Convert to a final GeoPHP geometry object and reduce the geometry.
  $geometry = geoPHP::load($wkt, 'wkt');
  $geometry = geoPHP::geometryReduce($geometry);

  // Return the geometry.
  return $geometry;
}

/**
 * Calculate latitude degree length at a given latitude. Equations are taken
 * from https://en.wikipedia.org/wiki/Geographic_coordinate_system#Expressing_latitude_and_longitude_as_linear_units
 *
 * @param $lat
 *   The latitude to calculate degree length at, in degrees.
 *
 * @return string
 *   Returns the length of a degree of latitude at the given latitude as a
 *   string, in meters.
 */
function growroom_map_lat_deg_len($lat) {

  // Load GeoPHP.
  geophp_load();

  // Convert degrees to radians.
  $lat = deg2rad($lat);

  // Define coefficients. These are copied from
  // http://gis.stackexchange.com/questions/75528/length-of-a-degree-where-do-the-terms-in-this-formula-come-from
  $m1 = 111132.95255;
  $m2 = 559.84957;
  $m3 = 1.17514;
  $m4 = 0.00230;

  // If BCMath is available, use that. Otherwise, use normal PHP float
  // operations.
  if (geoPHP::bcmathInstalled()) {
    $length = bcsub($m1, bcadd(bcmul($m2, cos(bcmul(2, $lat))), bcsub(bcmul($m3, cos(bcmul(4, $lat))), bcmul($m4, cos(bcmul(6, $lat))))));
  }
  else {
    $length = $m1 - ($m2 * cos(2 * $lat)) + ($m3 * cos(4 * $lat)) - ($m4 * cos(6 * $lat));
  }

  // Return the length.
  return (string) $length;
}

/**
 * Calculate longitude degree length at a given latitude. Equations are taken
 * from https://en.wikipedia.org/wiki/Geographic_coordinate_system#Expressing_latitude_and_longitude_as_linear_units
 * See also http://gis.stackexchange.com/questions/75528/length-of-a-degree-where-do-the-terms-in-this-formula-come-from
 *
 * @param $lat
 *   The latitude to calculate degree length at, in degrees.
 *
 * @return string
 *   Returns the length of a degree of longitude at the given latitude as a
 *   string, in meters.
 */
function growroom_map_lon_deg_len($lat) {

  // Load GeoPHP.
  geophp_load();

  // Convert degrees to radians.
  $lat = deg2rad($lat);

  // Define coefficients. These are copied from
  // http://gis.stackexchange.com/questions/75528/length-of-a-degree-where-do-the-terms-in-this-formula-come-from
  $p1 = 111412.87733;
  $p2 = 93.50412;
  $p3 = 0.11774;

  // If BCMath is available, use that. Otherwise, use normal PHP float
  // operations.
  if (geoPHP::bcmathInstalled()) {
    $length = bcsub(bcmul($p1, cos($lat)), bcsub(bcmul($p2, cos(bcmul(3, $lat))), bcmul($p3, cos(bcmul(5, $lat)))));
  }
  else {
    $length = ($p1 * cos($lat)) - ($p2 * cos(3 * $lat)) - ($p3 * cos(5 * $lat));
  }

  // Return the length.
  return (string) $length;
}

/**
 * Calculate the distance between two latitude/longitude points in meters.
 *
 * @param Point $p1
 *   The first point.
 * @param Point $p2
 *   The second point.
 *
 * @return string
 *   Returns the distance as a string, in meters.
 */
function growroom_map_distance($p1, $p2) {

  // Load GeoPHP.
  geophp_load();

  // Build a LineString and calculate the center point.
  $line = new LineString(array($p1, $p2));
  $centroid = $line->centroid();

  // Calculate the length of latitude and longitude degrees at the centroid.
  $lon_deg_len = growroom_map_lon_deg_len($centroid->getY());
  $lat_deg_len = growroom_map_lat_deg_len($centroid->getY());

  // If BCMath is available, use that. Otherwise, use normal PHP float
  // operations.
  if (geoPHP::bcmathInstalled()) {
    $length = bcsqrt(
      bcadd(
        bcpow(bcmul(bcsub($p1->getX(), $p2->getX()), $lon_deg_len), '2'),
        bcpow(bcmul(bcsub($p1->getY(), $p2->getY()), $lat_deg_len), '2')
      )
    );
  }
  else {
    $length = sqrt(pow((($p1->getX() - $p2->getX()) * $lon_deg_len), 2) + pow((($p1->getY() - $p2->getY()) * $lat_deg_len), 2));
  }

  // Return the length as a string.
  return (string) $length;
}

/**
 * Calculate the length of a LineString in meters.
 *
 * @param LineString $line
 *   The line to measure.
 *
 * @return string
 *   Returns the length of the line as a string, in meters.
 */
function growroom_map_line_length($line) {

  // Load GeoPHP.
  geophp_load();

  // Start with a length of zero.
  $length = 0;

  // Iterate through the points.
  foreach ($line->getPoints() as $delta => $point) {

    // Attempt to load the previous point.
    $previous_point = $line->geometryN($delta);

    // If a previous point is available
    if ($previous_point) {

      // If BCMath is available, use that. Otherwise, use normal PHP float
      // operations.
      if (geoPHP::bcmathInstalled()) {
        $length = bcadd($length, growroom_map_distance($previous_point, $point));
      }
      else {
        $length += growroom_map_distance($previous_point, $point);
      }
    }
  }

  // Return the length as a string.
  return (string) $length;
}

/**
 * Calculate the area of a Polygon in square meters.
 *
 * @param Polygon $polygon
 *   The polygon to measure.
 *
 * @return string
 *   Returns the area of the polygon as a string, in  square meters.
 */
function growroom_map_polygon_area($polygon) {

  // If the geometry is not a polygon, bail.
  if ($polygon->geometryType() != 'Polygon' || $polygon->components[0]->geometryType() != 'LineString') {
    return $polygon;
  }

  // We're going to do a pseudo-projection of the polygon into a coordinate
  // system that is measured in meters, and then run a standard area calculation
  // on that. We'll do this by first finding the bounding box of the polygon,
  // and use the lower left point as origin. Then, we'll calculate the latitude
  // and longitude lengths of the polygon's centroid point, and use those to
  // calculate the new point positions.

  // Get the bounding box of the polygon.
  $bbox = $polygon->getBBox();

  // Create an origin point.
  $origin = new Point($bbox['minx'], $bbox['miny']);

  // Get the polygon's centroid point.
  $centroid = $polygon->centroid();

  // Calculate the latitude/longitude degree lengths at the centroid point.
  $lon_deg_len = growroom_map_lon_deg_len($centroid->getY());
  $lat_deg_len = growroom_map_lat_deg_len($centroid->getY());

  // Iterate through the polygon's points and map them to new points.
  $line = $polygon->components[0];
  $new_points = array();
  foreach ($line->getPoints() as $delta => $point) {

    // Calculate the distance between the point and origin.
    $distance_x = $point->getX() - $origin->getX();
    $distance_y = $point->getY() - $origin->getY();

    // Multiply distances by latitude/longitude degree lengths to get new point.
    $new_x = $distance_x * $lon_deg_len;
    $new_y = $distance_y * $lat_deg_len;

    // Add the new point.
    $new_points[] = new Point($new_x, $new_y);
  }

  // Construct a new polygon.
  $new_polygon = new Polygon(array(new LineString($new_points)));

  // Calculate the area of the new polygon.
  $area = $new_polygon->area();

  // Return the area as a string.
  return (string) $area;
}
