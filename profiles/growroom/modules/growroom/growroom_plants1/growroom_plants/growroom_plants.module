<?php
/**
 * @file
 * Code for the Growroom Plants feature.
 */

include_once 'growroom_plants.features.inc';

/**
 * Implements hook_growroom_ui_entities().
 */
function growroom_plants_growroom_ui_entities() {
  return array(
    'growroom_asset' => array(
      'individual' => array(
        'label' => t('Individual'),
        'label_plural' => t('Individuals'),
        'view' => 'growroom_individuals',
      ),
    ),
    'log' => array(
      'growroom_repop' => array(
        'label' => t('Repop record'),
        'label_plural' => t('Repop records'),
        'view' => 'growroom_log_repop',
        'growroom_asset' => 'individual',
        'log_view_asset_arg' => 3,
        'weight' => 20,
      ),
      'growroom_treatment' => array(
        'label' => t('Treatment record'),
        'label_plural' => t('Treatment records'),
        'view' => 'growroom_log_treatment',
        'growroom_asset' => 'individual',
        'weight' => 20,
      ),
    ),
    'taxonomy_term' => array(
      'growroom_individual_cultivars' => array(
        'label' => t('Cultivar'),
        'label_plural' => t('Cultivars'),
        'view' => 'growroom_individual_cultivars',
        'growroom_asset' => 'individual',
        'asset_view_arg' => 2,
      ),      
    ),
  );
}

/**
 * Implements hook_growroom_log_categories().
 */
function growroom_plants_growroom_log_categories() {

  // Provide an "Individuals" log category.
  return array('Individuals');
}

/**
 * Implements hook_growroom_log_categories_populate().
 */
function growroom_plants_growroom_log_categories_populate($log) {
  $categories = array();
  if (in_array($log->type, array('growroom_repop', 'growroom_treatment'))) {
    $categories[] = 'Individuals';
  }
  return $categories;
}


/**
 * Implements hook_restws_field_collection_info().
 */
function growroom_plants_restws_field_collection_info() {
  return array(
    'field_growroom_individual_barcode' => array(
      'alias' => 'barcode',
      'label' => t('ID barcodes'),
      'multiple' => TRUE,
      'fields' => array(
        'id' => array(
          'field_name' => 'field_growroom_individual_barcode_id',
          'field_label' => t('barcode ID'),
          'field_type' => 'text',
          'field_value' => 'value',        
        ),
      ),
    ),
  );
}

/**
 * Implements hook_growroom_log_prepopulate_reference_fields().
 */
function growroom_plants_growroom_log_prepopulate_reference_fields($log_type) {

  // Allow field_growroom_mother to be prepopulated in repop log forms.
  if ($log_type == 'growroom_repop') {
    return array(
      'field_growroom_individual_mother' => array(
        'entity_type' => 'growroom_asset',
        'url_param' => 'growroom_asset',
      ),
    );
  }
}

/**
 * Implements hook_growroom_log_prepopulate_reference_fields_alter().
 */
function growroom_plants_growroom_log_prepopulate_reference_fields_alter(&$fields, $log_type) {

  // Do not prepopulate field_growroom_asset in repop log forms, because that is
  // the offspring reference field. When the "Add repop record" action is
  // clicked, we assume that the user wants to create a repop record from the
  // context of a mother individual. So field_growroom_mother is prepopulated instead.
  // See growroom_plants_growroom_log_prepopulate_reference_fields() above.
  if ($log_type == 'growroom_repop') {
    if (!empty($fields['field_growroom_asset'])) {
      unset($fields['field_growroom_asset']);
    }
  }
}

/**
 * Implements hook_feeds_importer_default_alter().
 */
function growroom_plants_feeds_importer_default_alter($importers) {

  // Add extra field mappings to individuals.
  $name = 'growroom_asset_individual';
  if (!empty($importers[$name])) {
    $mappings = array(
      array(
        'source' => 'Cultivar',
        'target' => 'field_growroom_individual_cultivar',
        'term_search' => '0',
        'autocreate' => 1,
        'language' => 'und',
      ),
      array(
        'source' => 'Date of repop',
        'target' => 'field_growroom_date:start',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Origin',
        'target' => 'field_growroom_individual_origin',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Fertility',
        'target' => 'field_growroom_individual_fertility',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'Supplier',
        'target' => 'field_growroom_supplier',
        'unique' => FALSE,
        'language' => 'und',
      ),
      array(
        'source' => 'barcode ID',
        'target' => 'field_growroom_individual_barcode:field_growroom_individual_barcode_id',
        'unique' => FALSE,
        'language' => 'und',
      ),
    );
    $importer_mappings =& $importers[$name]->config['processor']['config']['mappings'];
    $importer_mappings = array_merge($importer_mappings, $mappings);
  }

  // Add/alter field mappings on repop logs.
  $name = 'log_growroom_repop';
  if (!empty($importers[$name])) {

    // Add Mother ID mapping.
    $mappings = array(
      array(
        'source' => 'Mother ID',
        'target' => 'field_growroom_mother',
        'unique' => FALSE,
        'language' => 'und',
      ),
    );
    $importer_mappings =& $importers[$name]->config['processor']['config']['mappings'];
    $importer_mappings = array_merge($importer_mappings, $mappings);

    // Change "Asset IDs" to "Offspring IDs".
    foreach ($importer_mappings as &$mapping) {
      if ($mapping['source'] == 'Asset IDs') {
        $mapping['source'] = 'Offspring IDs';
      }
    }
  }
}

/**
 * Implements hook_feeds_tamper_default_alter().
 */
function growroom_plants_feeds_tamper_default_alter(&$feeds_tampers) {

  // If growroom_import is not installed, bail.
  if (!module_exists('growroom_import')) {
    return;
  }

  // Make Cultivar required.
  $feeds_tamper = growroom_import_feeds_tamper_plugin('growroom_asset', 'individual', 'Cultivar', 'required');
  $feeds_tampers[$feeds_tamper->id] = $feeds_tamper;

  // Convert date of repop to a Unix timestamp.
  $feeds_tamper = growroom_import_feeds_tamper_plugin('growroom_asset', 'individual', 'Date of Repop', 'strtotime');
  $feeds_tampers[$feeds_tamper->id] = $feeds_tamper;

}

/**
 * Implements hook_entity_view_alter().
 */
function growroom_plants_entity_view_alter(&$build, $type) {

  // If it's not a growroom_asset, or if the entity object is not available, bail.
  if ($type != 'growroom_asset' || empty($build['#entity'])) {
    return;
  }

  // Alias the asset variable.
  $asset = $build['#entity'];

  // If it isn't an individual asset, bail.
  if ($asset->type != 'individual') {
    return;
  }

  // Get the individual's current weight.
  $weight = growroom_plants_individual_weight($asset);

  // If a weight measurement isn't available, bail.
  if (empty($weight)) {
    return;
  }

  // Get the value and the units.
  $value = !empty($weight['value']) ? $weight['value'] : '';
  $units = !empty($weight['units']) ? $weight['units'] : '';

  // Build the weight display.
  $output = '<strong>' . t('Weight') . ':</strong> ' . $value . ' ' . $units;

  // If the individual has an inventory greater than 1, add "(average)".
  $inventory = growroom_inventory($asset);
  if ($inventory > 1) {
    $output .= ' (' . t('average') . ')';
  }

  // Add it to the build array.
  $build['weight'] = array(
    '#markup' => $output,
    '#prefix' => '<div class="weight">',
    '#suffix' => '</div>',
    '#weight' => -120,
  );
}

/**
 * Implements hook_preprocess_field().
 */
function growroom_plants_preprocess_field(&$variables, $hook) {

  // Only act on field_growroom_date on individual assets.
  $element = $variables['element'];
  if (empty($element['#field_name']) || $element['#field_name'] != 'field_growroom_date') {
    return;
  }
  if (!($element['#entity_type'] == 'growroom_asset' && $element['#bundle'] == 'individual')) {
    return;
  }

  // If the field is blank, bail.
  if (empty($element['#items'][0]['value']) || empty($variables['items'][0]['#markup'])) {
    return;
  }

  // Get the asset ID.
  if (empty($element['#object']->id)) {
    return;
  }
  $asset_id = $element['#object']->id;

  // Search for this asset's repop log.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'log')
    ->entityCondition('bundle', 'growroom_repop')
    ->fieldCondition('field_growroom_asset', 'target_id', $asset_id);
  $result = $query->execute();

  // Load only the first log.
  $log = NULL;
  if (isset($result['log'])) {
    $log_ids = array_keys($result['log']);
    $log_id = reset($log_ids);
    $log = log_load($log_id);
  }

  // If a log exists, link the repop date field to it.
  if (!empty($log)) {
    $repopdate = $variables['items'][0]['#markup'];
    $log_uri = entity_uri('log', $log);
    $variables['items'][0]['#markup'] = '<a href="' . url($log_uri['path']) . '">' . $repopdate . '</a>';
  }
}

/**
 * Implements hook_entity_insert().
 */
function growroom_plants_entity_insert($entity, $type) {

  // If this is a repop log, sync offspring.
  if ($type == 'log' && $entity->type == 'growroom_repop') {
    growroom_plants_repop_log_sync($entity);
  }
}

/**
 * Implements hook_entity_update().
 */
function growroom_plants_entity_update($entity, $type) {

  // If this is a repop log, sync offspring.
  if ($type == 'log' && $entity->type == 'growroom_repop') {
    growroom_plants_repop_log_sync($entity);
  }
}

/**
 * Sync information in offspring individuals if a repop log is saved.
 *
 * @param Log $log
 *   The log entity that is being created or updated.
 */
function growroom_plants_repop_log_sync($log) {

  // Load log entity metadata wrapper.
  $log_wrapper = entity_metadata_wrapper('log', $log);

  // Get the mother individual asset ID from the repop log.
  $mother_id = $log_wrapper->field_growroom_mother->getIdentifier();

  // Iterate through the offspring assets.
  foreach ($log_wrapper->field_growroom_asset->getIterator() as $delta => $offspring_wrapper) {

    // We will only save the offspring asset if we need to.
    $save = FALSE;

    // If the individual's date of repop does not match the timestamp of the repop
    // log, sync it.
    if ($offspring_wrapper->field_growroom_date->value() != $log->timestamp) {
      $offspring_wrapper->field_growroom_date->set($log->timestamp);
      drupal_set_message(t('<a href="!asset_path">@asset_label</a>\'s date of repop has been updated to match their repop log.', array('!asset_path' => url('growroom/asset/' . $offspring_wrapper->getIdentifier()), '@asset_label' => $offspring_wrapper->label())));
      $save = TRUE;
    }

    // If a mother is specified, make sure that it is listed as one of the
    // offspring's parents.
    if (!empty($mother_id)) {

      // Iterate through the offspring's parents to see if the mother is listed.
      $mother_exists = FALSE;
      foreach ($offspring_wrapper->field_growroom_parent->getIterator() as $delta => $parent_wrapper) {
        if ($parent_wrapper->getIdentifier() == $mother_id) {
          $mother_exists = TRUE;
        }
      }

      // If the mother is not one of the offspring's parents, add her.
      if (!$mother_exists) {
        $ofspring_wrapper->field_growroom_parent[] = $mother_id;
        $message_args = array(
          '!mother_path' => url('growroom/asset/' . $log_wrapper->field_growroom_mother->getIdentifier()),
          '@mother_label' => $log_wrapper->field_growroom_mother->label(),
          '!offspring_path' => url('growroom/asset/' . $offspring_wrapper->getIdentifier()),
          '@offspring_label' => $offspring_wrapper->label(),
        );
        drupal_set_message(t('<a href="!mother_path">@mother_label</a> was added to <a href="!offspring_path">@offspring_label</a>\'s parents.', $message_args));
        $save = TRUE;
      }
    }

    // Save the asset, if necessary.
    if ($save) {
      $offspring_wrapper->save();
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function growroom_plants_form_growroom_asset_form_alter(&$form, &$form_state, $form_id) {

  // Get the growroom asset entity from the form.
  $asset = $form['growroom_asset']['#value'];

  // If the asset is not an individual, bail.
  if ($asset->type != 'individual') {
    return;
  }

  // Get the individual's current weight.
  $weight = growroom_plants_individual_weight($asset);

  // Add a field for setting the individual's current weight.
  $form['weight'] = array(
    '#type' => 'fieldset',
    '#title' => t('Weight'),
    '#description' => t('Set the current weight for this individual. If this record is used to represent multiple individuals, enter their average weight. An observation log will be created automatically to record the weight.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 100,
    '#tree' => TRUE,
  );
  $form['weight']['value'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#default_value' => !empty($weight['value']) ? $weight['value'] : '',
    '#element_validate' => array('element_validate_number'),
  );
  $form['weight']['units'] = array(
    '#type' => 'textfield',
    '#title' => t('Units'),
    '#autocomplete_path' => 'taxonomy/autocomplete/field_growroom_quantity_units',
    '#default_value' => !empty($weight['units']) ? $weight['units'] : '',
  );
  $form['actions']['submit']['#validate'][] = 'growroom_plants_asset_form_validate';
  $form['actions']['submit']['#submit'][] = 'growroom_plants_asset_form_submit';
  $form['#group_offspring']['weight'] = 'group_growroom_identification';
}

/**
 * Validate handler for processing the individual weight field.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function growroom_plants_asset_form_validate(array $form, array &$form_state) {

  // If units are set, but not weight, show an error.
  if (empty($form_state['values']['weight']['value']) && !empty($form_state['values']['weight']['units'])) {
    form_set_error('weight][value', t('Both weight and units must be specified.'));
  }
}

/**
 * Submit handler for processing the individual weight field.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function growroom_plants_asset_form_submit(array $form, array &$form_state) {

  // Only proceed if weight has a value.
  if (empty($form_state['values']['weight']['value'])) {
    return;
  }

  // Only proceed if the value is not the default value.
  if ($form_state['values']['weight']['value'] == $form['weight']['value']['#default_value']) {
    return;
  }

  // If an asset doesn't exist, bail.
  if (empty($form_state['values']['growroom_asset'])) {
    return;
  }

  // Grab the asset, weight, and units.
  $asset = $form_state['values']['growroom_asset'];
  $weight = $form_state['values']['weight']['value'];
  $units = $form_state['values']['weight']['units'];

  // Create an observation log to set the weight.
  growroom_plants_weight_set($asset, $weight, $units);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function growroom_plants_form_log_form_alter(&$form, &$form_state, $form_id) {

  // Only act on the repop log form.
  if (!(!empty($form['log']['#value']->type) && $form['log']['#value']->type == 'growroom_repop')) {
    return;
  }

  // If this is a new repop log form, display a link to the repop quick form
  // for convenience.
  if (!empty($form['log']['#value']->is_new)) {
    drupal_set_message(t('Tip: Use the <a href="@path">Repop Quick Form</a> to quickly record individual repops and create offspring individual records at the same time.', array('@path' => url('growroom/quick/repop'))));
  }

  // Add validation to make sure that the same offspring is not referenced in
  // multiple repop logs.
  $form['#validate'][] = 'growroom_plants_repop_log_form_validate';
}

/**
 * Validate handler for the repop log form.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function growroom_plants_repop_log_form_validate(array $form, array &$form_state) {

  // Get the log ID (if available).
  $log_id = 0;
  if (!empty($form_state['values']['log']->id)) {
    $log_id = $form_state['values']['log']->id;
  }

  // Get the referenced assets.
  $asset_ids = array();
  if (!empty($form_state['values']['field_growroom_asset'][LANGUAGE_NONE])) {
    foreach ($form_state['values']['field_growroom_asset'][LANGUAGE_NONE] as $asset_reference) {
      if (empty($asset_reference['target_id'])) {
        continue;
      }
      $asset_ids[] = $asset_reference['target_id'];
    }
  }

  // If there are assets, look up repop logs that reference them.
  if (!empty($asset_ids)) {

    // Perform an entity field query to find logs that reference the assets.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'log')
      ->entityCondition('bundle', 'growroom_repop')
      ->propertyCondition('id', $log_id, '!=')
      ->fieldCondition('field_growroom_asset', 'target_id', $asset_ids);
    $result = $query->execute();
    if (isset($result['log'])) {
      $log_ids = array_keys($result['log']);
      $logs = entity_load('log', $log_ids);
    }

    // If matching logs were found, set form error(s).
    if (!empty($logs)) {
      foreach ($logs as $log) {
        $log_label = entity_label('log', $log);
        $log_uri = entity_uri('log', $log);
        form_set_error('field_growroom_asset', t('The existing repop log <a href="@log_path">%log_name</a> already references one or more of the offspring. More than one repop log cannot reference the same offspring.', array('%offspring_name' => '', '@log_path' => url($log_uri['path']), '%log_name' => $log_label)));
      }
    }
  }
}

/**
 * Implements hook_action_info().
 */
function growroom_plants_action_info() {
  return array(
    'growroom_plants_weight_action' => array(
      'type' => 'growroom_asset',
      'label' => t('Weight'),
      'configurable' => TRUE,
      'triggers' => array('any'),
      'aggregate' => TRUE,
    ),
  );
}

/**
 * Configuration form for growroom_plants_weight_action.
 *
 * @param array $context
 *   The context passed into the action form function.
 * @param array $form_state
 *   The form state passed into the action form function.
 *
 * @return array
 *   Returns a form array.
 */
function growroom_plants_weight_action_form(array $context, array $form_state) {

  // Date field.
  $form['date'] = array(
    '#type' => 'date_select',
    '#title' => t('Date'),
    '#date_format' => 'M j Y',
    '#date_type' => DATE_FORMAT_UNIX,
    '#date_year_range' => '-10:+3',
    '#default_value' => date('Y-m-d H:i', REQUEST_TIME),
    '#required' => TRUE,
  );

  // Weight.
  $form['weight'] = array(
    '#type' => 'textfield',
    '#title' => t('Weight'),
    '#element_validate' => array('element_validate_number'),
    '#required' => TRUE,
  );

  // Units.
  $form['units'] = array(
    '#type' => 'textfield',
    '#title' => t('Units'),
    '#autocomplete_path' => 'taxonomy/autocomplete/field_growroom_quantity_units',
    '#required' => TRUE,
  );

  // Return the form.
  return $form;
}

/**
 * Submit handler for growroom_plants_weight_action configuration form.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   Returns an array that will end up in the action's context.
 */
function growroom_plants_weight_action_submit(array $form, array $form_state) {

  // Start to build the context array.
  $context = array();

  // Convert the date to a timestamp.
  $timestamp = strtotime($form_state['values']['date']);

  // The action form only includes month, day, and year. If the measurement is
  // today, then we assume that the current time should also be included.
  if (date('Ymd', $timestamp) == date('Ymd', REQUEST_TIME)) {
    $context['timestamp'] = REQUEST_TIME;
  }

  // Otherwise, the measurement is in the past/future, so don't include a time.
  else {
    $context['timestamp'] = $timestamp;
  }

  // Add the weight and units fields.
  $context['weight'] = $form_state['values']['weight'];
  $context['units'] = $form_state['values']['units'];

  // Return the context array.
  return $context;
}

/**
 * Action function for growroom_plants_weight_action.
 *
 * Creates a new weight observation log for the specified assets.
 *
 * @param array $assets
 *   An array of asset entities.
 * @param array $context
 *   Array with parameters for this action.
 */
function growroom_plants_weight_action(array $assets, $context = array()) {

  // If we're missing assets, weight, units, or a timestamp, bail.
  if (empty($assets) || empty($context['weight']) || empty($context['units']) || empty($context['timestamp'])) {
    drupal_set_message('Could not set weights because required information was missing.', 'error');
    return;
  }

  // Set the individual weights.
  growroom_plants_weight_set($assets, $context['weight'], $context['units'], $context['timestamp']);
}

/**
 * Helper function for retrieving the weight of an individual.
 *
 * @param GrowroomAsset $asset
 *   The individual asset to get weight for.
 *
 * @return array
 *   Returns an array of quantity information about the asset's weight, based
 *   on its latest weight quantity log. Returns an empty array if nothing is
 *   found.
 */
function growroom_plants_individual_weight($asset) {

  // Load the latest log with a 'weight' quantity measurement for this asset.
  $log = growroom_quantity_log_asset($asset, 'weight');

  // if no weight observation log exists for asset
  if (empty($log)) {
    return array();
  }

  // Extract quantity data from the log.
  $data = growroom_quantity_log_data($log, 'weight');

  // Iterate through the data and return the first one with a value.
  foreach ($data as $quantity) {
    if (!empty($quantity['value'])) {
      return $quantity;
    }
  }

  // If nothing was returned, return an empty array.
  return array();
}

/**
 * Create a weight measurement log associated with an individual.
 *
 * @param array $assets
 *   The assets to add a weight measurement to.
 * @param string $weight
 *   The individual's current weight.
 * @param string $units
 *   The units of measurement.
 * @param int $timestamp
 *   The timestamp of the measurement. Defaults to the current time.
 * @param bool $done
 *   Boolean indicating whether or not the log should be marked "done".
 *   Defaults to TRUE.
 *
 * @return \Log
 *   Returns the log that was created.
 */
function growroom_plants_weight_set($assets, $weight, $units, $timestamp = REQUEST_TIME, $done = TRUE) {

  // The log will be an observation.
  $log_type = 'growroom_observation';

  // Set the name to: "Weight of [assets] is [weight] [units]".
  $assets_summary = growroom_log_entity_label_summary('growroom_asset', $assets);
  $log_name = t('Weight of !assets is @weight @units', array('!assets' => $assets_summary, '@weight' => $weight, '@units' => $units));

  // If $assets isn't an array, wrap it.
  if (!is_array($assets)) {
    $assets = array($assets);
  }

  // Assemble an array of measurements.
  $measurements = array(
    array(
      'measure' => 'weight',
      'value' => $weight,
      'units' => $units,
      'label' => '',
    ),
  );

  // Create a new log entity.
  $log = growroom_quantity_log_create($log_type, $log_name, $timestamp, $done, $assets, $measurements);

  // Return the log.
  return $log;
}
