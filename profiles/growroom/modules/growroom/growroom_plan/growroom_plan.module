<?php

/**
 * @file
 * Growroom plan - A growroom plan entity type.
 */

// Include Features code.
include_once 'growroom_plan.features.inc';

/****************************************************************
 * Drupal hooks
 * **************************************************************/

/**
 * Implements hook_permission().
 */
function growroom_plan_permission() {
  $perms = array(
    'administer growroom_plan module' => array(
      'title' => t('Administer growroom plan module'),
      'description' => t('Gives full access to everything in the growroom plan module.'),
      'restrict access' => TRUE,
    ),
    'administer growroom_plan types' => array(
      'title' => t('Administer growroom plan types'),
      'restrict access' => TRUE,
    ),
    'view growroom plans' => array(
      'title' => t('View growroom plans'),
      'description' => t('Allows users to view the full list of growroom plans.'),
    ),
  );

  // Add permissions for each growroom_plan type.
  foreach (growroom_plan_types() as $growroom_plan_type) {
    $type = $growroom_plan_type->type;
    $ops = array('view', 'edit', 'delete');
    $scopes = array('any', 'own');
    $perms += array(
      "create $type growroom plans" => array(
        'title' => t('Create new %type_name growroom plans', array('%type_name' => $growroom_plan_type->label)),
      ),
    );
    foreach ($ops as $op) {
      foreach ($scopes as $scope) {
        $perms += array(
          "$op $scope $type growroom plans" => array(
            'title' => drupal_ucfirst($op) . ' ' . $scope . ' ' . t('%type_name growroom plans', array('%type_name' => $growroom_plan_type->label)),
          ),
        );
      }
    }
  }

  return $perms;
}

/**
 * Implements hook_menu().
 */
function growroom_plan_menu() {
  $items = array();

  $items['growroom/plan/add'] = array(
    'title' => 'Add plan',
    'page callback' => 'growroom_plan_add_types_page',
    'access callback' => 'growroom_plan_add_access',
    'file' => 'growroom_plan.pages.inc',
  );
  foreach (growroom_plan_types() as $type => $info) {
    $items['growroom/plan/add/' . $type] = array(
      'title' => 'Add ' . $info->label,
      'page callback' => 'growroom_plan_add',
      'page arguments' => array(3),
      'access callback' => 'growroom_plan_access',
      'access arguments' => array('create', 3),
      'file' => 'growroom_plan.pages.inc',
    );
  }

  $growroom_plan_uri = 'growroom/plan/%growroom_plan';
  $growroom_plan_uri_argument_position = 2;

  $items[$growroom_plan_uri] = array(
    'title callback' => 'entity_label',
    'title arguments' => array('growroom_plan', $growroom_plan_uri_argument_position),
    'page callback' => 'growroom_plan_view',
    'page arguments' => array($growroom_plan_uri_argument_position),
    'access callback' => 'growroom_plan_access',
    'access arguments' => array('view', $growroom_plan_uri_argument_position),
    'file' => 'growroom_plan.pages.inc',
  );

  $items[$growroom_plan_uri . '/view'] = array(
    'title' => 'Plan',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items[$growroom_plan_uri . '/delete'] = array(
    'title' => 'Delete plan',
    'title callback' => 'growroom_plan_label',
    'title arguments' => array($growroom_plan_uri_argument_position),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growroom_plan_delete_form', $growroom_plan_uri_argument_position),
    'access callback' => 'growroom_plan_access',
    'access arguments' => array('update', $growroom_plan_uri_argument_position),
    'file' => 'growroom_plan.pages.inc',
  );

  $items[$growroom_plan_uri . '/edit'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growroom_plan_form', $growroom_plan_uri_argument_position),
    'access callback' => 'growroom_plan_access',
    'access arguments' => array('update', $growroom_plan_uri_argument_position),
    'file' => 'growroom_plan.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 100,
  );

  // Plan type delete form.
  $items['admin/config/growroom/plan-types/%growroom_plan_type/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('growroom_plan_type_form_delete_confirm', 4),
    'access arguments' => array('administer growroom_plan types'),
    'weight' => 1,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'growroom_plan.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function growroom_plan_entity_info() {
  $return = array(
    'growroom_plan' => array(
      'label' => t('Growroom plan'),
      'entity class' => 'GrowroomPlan',
      'controller class' => 'GrowroomPlanController',
      'base table' => 'growroom_plan',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'bundle' => 'type',
        'label' => 'name',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'growroom_plan_load',
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'growroom_plan',
      'access callback' => 'growroom_plan_access',
    ),
  );
  $return['growroom_plan_type'] = array(
    'label' => t('Growroom plan type'),
    'entity class' => 'GrowroomPlanType',
    'controller class' => 'GrowroomPlanTypeController',
    'base table' => 'growroom_plan_type',
    'fieldable' => FALSE,
    'bundle of' => 'growroom_plan',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'module' => 'growroom_plan',
    // Enable the entity API admin UI.
    'admin ui' => array(
      'path' => 'admin/config/growroom/plan-types',
      'file' => 'growroom_plan.admin.inc',
      'controller class' => 'GrowroomPlanTypeUIController',
    ),
    'access callback' => 'growroom_plan_type_access',
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 */
function growroom_plan_entity_info_alter(&$entity_info) {
  foreach (growroom_plan_types() as $type => $info) {
    $entity_info['growroom_plan']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/config/growroom/plan-types/manage/%growroom_plan_type',
        'real path' => 'admin/config/growroom/plan-types/manage/' . $type,
        'bundle argument' => 5,
      ),
    );
  }
}

/**
 * Implements hook_entity_property_info_alter().
 */
function growroom_plan_entity_property_info_alter(&$info) {
  $properties = &$info['growroom_plan']['properties'];
  $properties['name'] = array(
    'label' => t('Name'),
    'description' => t('The name of the plan.'),
    'setter callback' => 'entity_property_verbatim_set',
    'schema field' => 'name',
  );
  $properties['type'] = array(
    'label' => t('Growroom plan type'),
    'type' => 'token',
    'description' => t('The growroom plan type.'),
    'setter callback' => 'entity_property_verbatim_set',
    'access callback' => 'growroom_plan_properties_access',
    'options list' => 'growroom_plan_type_get_names',
    'required' => TRUE,
    'schema field' => 'type',
  );
  $properties['uid'] = array(
    'label' => t('Owner'),
    'type' => 'user',
    'description' => t('The owner of the plan.'),
    'setter callback' => 'entity_property_verbatim_set',
    'access callback' => 'growroom_plan_properties_access',
    'required' => TRUE,
    'schema field' => 'uid',
  );
  $properties['created'] = array(
    'label' => t('Created'),
    'type' => 'date',
    'description' => t('The timestamp when the plan was created.'),
    'setter callback' => 'entity_property_verbatim_set',
    'access callback' => 'growroom_plan_properties_access',
    'required' => TRUE,
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t('Changed'),
    'type' => 'date',
    'description' => t('The timestamp when the plan was last modified.'),
    'setter callback' => 'entity_property_verbatim_set',
    'access callback' => 'growroom_plan_properties_access',
    'required' => TRUE,
    'schema field' => 'changed',
  );
  $properties['active'] = array(
    'label' => t('Active'),
    'description' => t('Whether the plan is active.'),
    'setter callback' => 'entity_property_verbatim_set',
    'access callback' => 'growroom_plan_properties_access',
    'schema field' => 'active',
    'type' => 'boolean',
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function growroom_plan_field_extra_fields() {
  $growroom_plan_types = growroom_plan_types();
  $extra_fields = array(
    'growroom_plan' => array(),
  );
  foreach ($growroom_plan_types as $type) {
    $extra_fields['growroom_plan'][$type->type] = array(
      'form' => array(

        // Add plan name field to field UI.
        'name' => array(
          'label' => t('Name'),
          'description' => t('The name of the plan.'),
          'weight' => -10,
        ),
      ),
    );
  }
  return $extra_fields;
}

/**
 * Implements hook_entity_view().
 */
function growroom_plan_entity_view($entity, $type, $view_mode, $langcode) {

  // If the entity is not a growroom_plan, bail.
  if ($type != 'growroom_plan') {
    return;
  }

  // Add the plan type.
  $plan_types = growroom_plan_type_get_names();
  if (!empty($plan_types[$entity->type])) {
    $entity->content['type'] = array(
      '#markup' => '<div><strong>Plan type:</strong> ' . $plan_types[$entity->type] . '</div>',
      '#weight' => -101,
    );
  }

  // Add the plan's "active" status.
  if ($entity->active) {
    $status = 'Yes';
  }
  else {
    $status = 'No';
    drupal_set_message(t('This plan is no longer active. Inactive plans should be considered "archived" and should not be edited or deleted unless they contain information that is incorrect.'), 'warning');
  }
  $entity->content['active'] = array(
    '#markup' => '<div><strong>Active plan:</strong> ' . $status . '</div>',
    '#weight' => -100,
  );
}

/***************************************************************
 * Access functions
 * *************************************************************/

/**
 * Access callback for plan entities.
 *
 * @param string $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'.
 * @param GrowroomPlan|string $growroom_plan
 *   Optionally a specific plan entity to check.
 * @param object $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return bool
 *   Whether access is allowed or not.
 */
function growroom_plan_access($op, $growroom_plan = NULL, $account = NULL) {
  $rights = &drupal_static(__FUNCTION__, array());

  // If $op is not one of the supported ones, deny access.
  if (!in_array($op, array('create', 'view', 'update', 'delete'), TRUE)) {
    return FALSE;
  }
  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  // If no plan is provided, check for access to all plans.
  if (empty($growroom_plan)) {
    return user_access('view growroom plans', $account);
  }

  // $growroom_plan may be either an object or a plan type. Since plan types
  // cannot be an integer, use either id or type as the static cache id.
  $cid = is_object($growroom_plan) ? $growroom_plan->id : $growroom_plan;

  // If we've already checked access for this plan, user and op, return from
  // cache.
  if (isset($rights[$account->uid][$cid][$op])) {
    return $rights[$account->uid][$cid][$op];
  }

  // If the user has 'administer growroom_plan module' permission, grant them
  // access.
  if (user_access('administer growroom_plan module', $account)) {
    $rights[$account->uid][$cid][$op] = TRUE;
    return TRUE;
  }

  // Check access to the plan based on it's type.
  $type = is_string($growroom_plan) ? $growroom_plan : $growroom_plan->type;
  $growroom_plan_types = growroom_plan_types();
  $type_names = array();
  foreach ($growroom_plan_types as $name => $growroom_plan_type) {
    $type_names[] = $name;
  }
  if (in_array($type, $type_names)) {
    if ($op == 'create' && user_access('create ' . $type . ' growroom plans', $account)) {
      $rights[$account->uid][$cid][$op] = TRUE;
      return TRUE;
    }

    if ($op == 'view') {
      if (user_access('view any ' . $type . ' growroom plans', $account) || (user_access('view own ' . $type . ' growroom plans', $account) && ($account->uid == $growroom_plan->uid))) {
        $rights[$account->uid][$cid][$op] = TRUE;
        return TRUE;
      }
    }

    if ($op == 'update') {
      if (user_access('edit any ' . $type . ' growroom plans', $account) || (user_access('edit own ' . $type . ' growroom plans', $account) && ($account->uid == $growroom_plan->uid))) {
        $rights[$account->uid][$cid][$op] = TRUE;
        return TRUE;
      }
    }

    if ($op == 'delete') {
      if (user_access('delete any ' . $type . ' growroom plans', $account) || (user_access('delete own ' . $type . ' growroom plans', $account) && ($account->uid == $growroom_plan->uid))) {
        $rights[$account->uid][$cid][$op] = TRUE;
        return TRUE;
      }
    }
  }

  // If all else fails, deny access.
  return FALSE;
}

/**
 * Access callback: Checks whether the user has permission to add a plan.
 *
 * @param object|null $account
 *   The user account.
 *
 * @return bool
 *   TRUE if the user has add permission, otherwise FALSE.
 */
function growroom_plan_add_access($account = NULL) {

  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    global $user;
    $account = $user;
  }

  // Check each of the plan types to see if the user has access.
  $types = growroom_plan_types();
  foreach ($types as $type) {
    if (growroom_plan_access('create', $type->type, $account)) {
      return TRUE;
    }
  }

  // If all else fails, deny access.
  return FALSE;
}

/**
 * Access callback for plan types.
 *
 * @param string $op
 *   The operation being performed.
 * @param GrowroomPlanType $growroom_plan_type
 *   The growroom plan entity.
 *
 * @return bool
 *   Returns true if the user has access.
 */
function growroom_plan_type_access($op, GrowroomPlanType $growroom_plan_type = NULL) {
  return user_access('administer growroom_plan types');
}

/**
 * Access callback for growroom_plan properties.
 */
function growroom_plan_properties_access($op, $property, $entity = NULL, $account = NULL) {

  // Delegate to the general growroom_plan access callback, based on the $op.
  switch ($op) {
    case 'view':
      return growroom_plan_access('view', $entity, $account);
    case 'edit':
      return growroom_plan_access('update', $entity, $account);
  }

  // Otherwise, deny access.
  return FALSE;
}

/***************************************************************
 * Growroom plan API functions
 * *************************************************************/

/**
 * Load a plan.
 *
 * @param int $id
 *   The plan id.
 * @param bool $reset
 *   Whether or not to reset the entity cache.
 *
 * @return GrowroomPlan
 *   Returns a growroom plan object.
 */
function growroom_plan_load($id, $reset = FALSE) {
  $growroom_plans = growroom_plan_load_multiple(array($id), array(), $reset);
  return reset($growroom_plans);
}

/**
 * Load multiple plans based on certain conditions.
 *
 * @param array $ids
 *   An array of growroom plan ids.
 * @param array $conditions
 *   An array of entity load conditions.
 * @param bool $reset
 *   Whether or not to reset the entity cache.
 *
 * @return array
 *   Returns an array of growroom plans.
 */
function growroom_plan_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('growroom_plan', $ids, $conditions, $reset);
}

/**
 * Save plan.
 *
 * @param GrowroomPlan $growroom_plan
 *   The growroom plan entity.
 */
function growroom_plan_save(GrowroomPlan $growroom_plan) {
  entity_save('growroom_plan', $growroom_plan);
}

/**
 * Delete single plan.
 *
 * @param GrowroomPlan $growroom_plan
 *   The growroom plan entity.
 */
function growroom_plan_delete(GrowroomPlan $growroom_plan) {
  entity_delete('growroom_plan', entity_id('growroom_plan', $growroom_plan));
}

/**
 * Delete multiple plans.
 *
 * @param array $growroom_plan_ids
 *   An array of growroom plan ids.
 */
function growroom_plan_delete_multiple(array $growroom_plan_ids) {
  entity_delete_multiple('growroom_plan', $growroom_plan_ids);
}

/***************************************************************
 * Growroom plan type API functions
 * *************************************************************/

/**
 * Load plan type.
 *
 * @param string $growroom_plan_type
 *   The growroom plan type.
 *
 * @return GrowroomPlanType
 *   Returns a growroom plan type entity.
 */
function growroom_plan_type_load($growroom_plan_type) {
  return growroom_plan_types($growroom_plan_type);
}

/**
 * List of plan types.
 *
 * @param string $type_name
 *   The growroom plan type name.
 *
 * @return GrowroomPlanType|array
 *   Returns either a single type, or an array of types.
 */
function growroom_plan_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('growroom_plan_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Save plan type entity.
 *
 * @param GrowroomPlanType $growroom_plan_type
 *   The growroom plan type entity.
 */
function growroom_plan_type_save(GrowroomPlanType $growroom_plan_type) {
  entity_save('growroom_plan_type', $growroom_plan_type);
}

/**
 * Delete single plan type.
 *
 * @param GrowroomPlanType $growroom_plan_type
 *   The growroom plan type entity.
 */
function growroom_plan_type_delete(GrowroomPlanType $growroom_plan_type) {
  entity_delete('growroom_plan_type', entity_id('growroom_plan_type', $growroom_plan_type));
}

/**
 * Delete multiple plan types.
 *
 * @param array $growroom_plan_type_ids
 *   An array of growroom plan type ids.
 */
function growroom_plan_type_delete_multiple(array $growroom_plan_type_ids) {
  entity_delete_multiple('growroom_plan_type', $growroom_plan_type_ids);
}

/**
 * Get the names of all plan types.
 *
 * @return array
 *   Returns an array of plan type names, keyed by machine name.
 */
function growroom_plan_type_get_names() {
  $names = array();
  $types = growroom_plan_types();
  foreach ($types as $type) {
    $names[$type->type] = $type->label;
  }
  return $names;
}
